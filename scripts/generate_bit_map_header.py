#!/usr/bin/python3

## @file generate_bit_map_header.py
#  @brief This file converts bitmap txt file into a header
#  @author Nick-Archi

# [TODO] Who knows...maybe turn this into a class if I'm bored

"""
Objective:
Script created to convert a bitmap text file into a header file
for usage. Helps speed up edits I make and to ensure that the correct
bitmap is generated.
"""

from sys import argv

# global variable used to store the name of the file
orig_file = ""

## @brief Reads in bitmap file to create list of lists for bitmap generation
## @return list of pre bitmap values 
def create_list(filepath="") -> list:
    ret = []  

    try:
        with open(filepath) as f:
            data = f.read()
    except FileNotFoundError:
        print("File Not Found")
        return ret

    print("Data has been read in...")
    global orig_file 
    orig_file = filepath
    
    curr_line = 0
    index = 0
    index_offset = -4

    for whole_line in data.split("\n"):
        if(whole_line == ''):
            curr_line += 1
            continue

        if ((curr_line % 9) == 0):
            index_offset += 4

        for line in whole_line.split():
            if (index > (len(whole_line.split()) - 1)):
                index = 0

            if((curr_line % 9) == 0):
                ret.append([])
                ret[index + index_offset].append([line])
            else:
                ret[index + index_offset].append([line])

            index += 1

        # done parsing a line
        curr_line += 1

    return ret


## @brief Convert pre bitmap values into bitmap 
## @return list of bitmap values 
def generate_bitmapping(mapping) -> list:
    """
    TODO: will require some playing around with the list returned from
    create_list(). Mapping so far is: ret[ ][ ][0][ ]
                                          ^  ^  ^  ^----- selects character
                                          |  |  |
                                          |  |  ------ static
                                          |  ----- row in character list
                                          ----- character #
    """
    ret = []
    binary = 0

    for char in range(len(mapping)):
        ret.append([])
        for col in range(0, len(mapping[0]), 1):
            for row in range(len(mapping[char]) - 1, -1, -1):
                binary <<= 1
                if(mapping[char][row][0][col] == '.'):
                    binary |= 0
                else:
                    binary |= 1
            #print("0b{:08b}".format(binary))
            ret[char].append(["0b{:08b}".format(binary)])
            binary = 0

    return ret 

def generate_bitmap_file(**kwargs):
    global orig_file
    bitmapping = kwargs["bitmapping"]
    filename = ""

    if kwargs.__contains__("filename"):
        filename = kwargs["filename"]

    header_info = ["/*\n", "* Autogenerated bitmap file from {}\n".format(orig_file), "*/\n\n"] 
    header_info.append("#ifndef _{}_BITMAP_H_\n".format(filename.upper()))
    header_info.append("#define _{}_BITMAP_H_\n\n".format(filename.upper()))

    trailer_info = ["#endif // _{}_BITMAP_H_".format(filename.upper())]

    # compose the body of the file now...
    body_info = ["static const uint8_t {}_bitmap[][8] = \n".format(filename.lower()), "{\n"]
    spacing = 0
    for char_sel in range(len(bitmapping)):
        spacing += 4
        body_info.append("".join(["{}".format(" " * spacing), "{\n"]))
        #body_info.append("{\n".format())
        spacing += 4
        for row_sel in range(len(bitmapping[0])):
            body_info.append("".join(["{}".format(" " * spacing), bitmapping[char_sel][row_sel][0], ",\n"]))
        spacing -= 4
        body_info.append("".join(["{}".format(" " * spacing), "},\n"]))
        spacing -= 4
        body_info.append("\n")
    
    body_info.append("};\n")

    with open("../include/{}_bitmap.h".format(filename), "w") as f:
        f.writelines(header_info)
        f.writelines(body_info)
        f.writelines(trailer_info)

    print("{} Header file generated to ../include/".format(filename))
    
    
if __name__ == "__main__":
    print("Running")
  
    try:
        input_file = argv[1]
    except IndexError:
        print("Missing argv[1] in call.")
        print("Example Call: ./generate_bit_map_header.py <input_file_path> <out_name>")
         
    try:
        name = argv[2]
    except IndexError:
        print("Missing argv[2] in call.")
        print("Example Call: ./generate_bit_map_header.py <input_file_path> <out_name>")
        exit()
 
    map_list = create_list(input_file)
    bit_list = generate_bitmapping(map_list)
    generate_bitmap_file(filename=name,bitmapping=bit_list)
